"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collector = void 0;
const TypedEventEmitter_1 = __importDefault(require("./TypedEventEmitter"));
/** A base collector class to be extended from. */
class Collector extends TypedEventEmitter_1.default {
    /**
     * @param options The collector options.
     */
    constructor(options = {}) {
        super();
        this.options = options;
        this.idleTimeout = null;
        this.max = null;
        this.timeout = null;
        this.endReason = null;
        /** An array of all the data collected. */
        this.collected = [];
        /** Whether this collector has stopped collecting. */
        this.ended = false;
        this.filter = options.filter ?? (() => true);
        if (options.time)
            this.timeout = setTimeout(() => this.stop('time'), options.time).unref();
        if (options.idle)
            this.idleTimeout = setTimeout(() => this.stop('idle'), options.idle).unref();
        if (options.max)
            this.max = options.max;
        this.handleCollect = this.handleCollect.bind(this);
        this.handleDispose = this.handleDispose.bind(this);
    }
    collect(...args) {
        return args;
    }
    ;
    dispose(...args) {
        return args;
    }
    ;
    /**
     * Call this to handle an event as a collectable element.
     * @param toHandle The data to handle as an element.
     */
    async handleCollect(toHandle) {
        const collected = await this.collect(toHandle);
        if (collected) {
            const filterResult = await this.filter(collected);
            if (filterResult) {
                this.collected.push(collected);
                this.emit('collect', collected);
                if (this.idleTimeout) {
                    clearTimeout(this.idleTimeout);
                    this.idleTimeout = setTimeout(() => this.stop('idle'), this.options.idle).unref();
                }
                if (this.max && this.collected.length >= this.max)
                    this.stop('limit');
            }
            else {
                this.emit('ignore', collected);
            }
        }
        this.checkEnd();
    }
    /**
     * Call this to remove an element from the collection.
     * @param collected The collected element to dispose.
     */
    async handleDispose(collected) {
        if (!this.options.dispose)
            return;
        const dispose = await this.dispose(collected);
        if (!dispose || !(await this.filter(dispose)) || !this.collected.includes(dispose))
            return;
        this.collected.splice(this.collected.indexOf(dispose), 1);
        this.emit('dispose', dispose);
        this.checkEnd();
    }
    /** A promise that resolves whenever the next data is collected. */
    get next() {
        return new Promise((resolve, reject) => {
            if (this.ended) {
                reject(this.collected);
                return;
            }
            const cleanup = () => {
                this.removeListener('collect', onCollect);
                this.removeListener('end', onEnd);
            };
            const onCollect = (collected) => {
                cleanup();
                resolve(collected);
            };
            const onEnd = () => {
                cleanup();
                reject(this.collected);
            };
            this.on('collect', onCollect);
            this.on('end', onEnd);
        });
    }
    async *[Symbol.asyncIterator]() {
        const queue = [];
        const onCollect = (collected) => queue.push(collected);
        this.on('collect', onCollect);
        try {
            while (queue.length || !this.ended) {
                if (queue.length) {
                    yield queue.shift();
                }
                else {
                    await new Promise((resolve) => {
                        const tick = () => {
                            this.removeListener('collect', tick);
                            this.removeListener('end', tick);
                            return resolve();
                        };
                        this.on('collect', tick);
                        this.on('end', tick);
                    });
                }
            }
        }
        finally {
            this.removeListener('collect', onCollect);
        }
    }
    /** Check whether this collector should have ended. */
    checkEnd() {
        const reason = this.endReason;
        if (reason)
            this.stop(reason);
        return Boolean(reason);
    }
    /** Empty the collected data of this collector. */
    empty() {
        this.collected = [];
        this.checkEnd();
    }
    /**
     * Reset the time to end this collector.
     * @param options The options to reset the timer.
     */
    resetTimer({ time, idle } = {}) {
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => this.stop('time'), time ?? this.options.time).unref();
        }
        if (this.idleTimeout) {
            clearTimeout(this.idleTimeout);
            this.idleTimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle).unref();
        }
    }
    /**
     * Stop this collector.
     * @param reason The reason to stop this collector. Defaults to "user".
     */
    stop(reason = 'user') {
        if (this.ended)
            return;
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        if (this.idleTimeout) {
            clearTimeout(this.idleTimeout);
            this.idleTimeout = null;
        }
        this.endReason = reason;
        this.ended = true;
        this.emit('end', this.collected, reason);
    }
}
exports.Collector = Collector;
exports.default = Collector;
//# sourceMappingURL=data:application/json;base64,